#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ohell:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

 // Make io accessible to our router
//  app.use('/game', function(req,res,next){
//      console.log('attaching socket to request');
//      req.io = io;
//      next();
//  });
//
// var server = http.createServer(app);
//
// const io = require('socket.io')(server);
// io.on('connection', (socket) => {
//   console.log('User connected');
//   socket.on('join', (id) => {
//     console.log('user joined' , id);
//     socket.join(id);
//   });
// });


//const io = require('socket.io')(4001);
//
//
//
//
// io.on('connect', function (client) {
//   console.log("connected");
//   client.on("placebet", function(name,fn){
//     fn('woot ' + name );
//
//   });
//   client.on('started', ()=>{
//     client.broadcast.emit('update');
//   });
//   client.on('bet', ()=>{
//     client.broadcast.emit('update');
//   });
//   client.on('play', ()=>{
//     client.broadcast.emit('update');
//   });
//   client.on('join', ()=>{
//     client.broadcast.emit('update');
//   });
//   client.on('event', function(data){});
//   client.on('disconnect', function(){
//     console.log('disconnect');
//   });
// });

/**
 * Listen on provided port, on all network interfaces.
 */
// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);
// console.log('listening on port ' + port);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
